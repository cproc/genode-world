assert_spec x86

if {[have_spec linux]} {
	puts "Run script is not supported on this platform."
	exit 0
}

# Build
#

set build_components {
	core init
	timer
	drivers/nic
	drivers/rtc
	drivers/audio
	server/nic_router
	server/ssh_terminal
	lib/vfs/jitterentropy
	lib/vfs/lwip
	lib/vfs/oss
	lib/vfs/pipe
	test/libports/ncurses
	app/cmus
	lib/cmus/ip/flac
	lib/cmus/ip/mad
	lib/cmus/ip/opus
	lib/cmus/ip/vorbis
	lib/cmus/op/oss
	lib/cmus/op/sndio
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config verbose="no">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="rtc_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Rtc"/> </provides>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes"/>
	</start>

	<start name="nic_drv">
		<binary name="ipxe_nic_drv"/>
		<resource name="RAM" quantum="8M"/>
	</start>

	<start name="nic_router" caps="200">
		<resource name="RAM" quantum="10M"/>
		<provides>
			<service name="Nic"/>
			<service name="Uplink"/>
		</provides>
		<config verbose_domain_state="yes">

			<policy label_prefix="ssh_terminal" domain="ssh"/>
			<policy label_prefix="nic_drv" domain="uplink"/>

			<domain name="uplink">

				<nat domain="ssh"
					 tcp-ports="16384"
					 udp-ports="16384"
					 icmp-ids="16384"/>

				<tcp-forward port="22" domain="ssh" to="10.0.3.2"/>
			</domain>

			<domain name="ssh" interface="10.0.3.1/24">

				<dhcp-server ip_first="10.0.3.2" ip_last="10.0.3.2">
					<dns-server ip="8.8.8.8"/>
				</dhcp-server>

				<tcp dst="0.0.0.0/0"><permit-any domain="uplink" /></tcp>
				<udp dst="0.0.0.0/0"><permit-any domain="uplink" /></udp>
				<icmp dst="0.0.0.0/0" domain="uplink"/>

			</domain>

		</config>
		<route>
			<service name="Nic"> <child name="nic_drv"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

<!--
	<start name="nic_router" caps="200">
		<resource name="RAM" quantum="6M"/>
		<provides> <service name="Nic"/> </provides>
		<config verbose="no" verbose_packets="no" verbose_packet_drop="yes" verbose_domain_state="no">

			<policy label_prefix="ssh_terminal" domain="ssh"/>
			<policy label_prefix="irssi"        domain="irssi"/>

			<uplink domain="uplink"/>

			<domain name="uplink" verbose_packets="no">
				<nat domain="ssh" udp-ports="64" tcp-ports="64" icmp-ids="64"/>
				<tcp-forward port="22" domain="ssh" to="10.0.1.2"/>
			</domain>

			<domain name="ssh" interface="10.0.1.1/24">
				<dhcp-server ip_first="10.0.1.2" ip_last="10.0.1.2"/>
				<icmp dst="0.0.0.0/0" domain="uplink"/>
				<udp dst="0.0.0.0/0"><permit-any domain="uplink"/></udp>
				<tcp dst="0.0.0.0/0"><permit-any domain="uplink"/></tcp>
			</domain>
		</config>
		<route>
			<service name="Nic"> <child name="nic_drv"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
-->


	<start name="ssh_terminal" caps="250">
		<resource name="RAM" quantum="32M"/>
		<provides> <service name="Terminal"/> </provides>
		<config port="22" allow_password="yes"
		        show_password="yes" ed25519_key="/etc/ssh/ed25519_key">
			<policy label_prefix="cmus" user="a" password="a" multi_login="yes" request_terminal="yes"/>

			<vfs>
				<dir name="dev">
					<dir name="pipe"> <pipe/> </dir>
					<log/>
					<jitterentropy name="random"/>
					<jitterentropy name="urandom"/>
					<rtc/>
				</dir>
				<dir name="etc">
					<dir name="ssh">
						<rom name="ed25519_key"/>
					</dir>
				</dir>
				<dir name="socket"> <lwip dhcp="yes"/> </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" socket="/socket" rtc="/dev/rtc" pipe="/dev/pipe">
			</libc>
		</config>
		<route>
			<service name="Nic"> <child name="nic_router"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="audio_drv" ld="yes">
		<binary name="} [audio_drv_binary] {"/>
		<resource name="RAM" quantum="8M"/>
		<provides> <service name="Audio_out"/> </provides>
		<config />
	</start>

	<start name="cmus" caps="200">
		<resource name="RAM" quantum="32M"/>
		<config ld_verbose="yes" verbose="yes">
			<env key="TERM" value="screen"/>
			<env key="HOME" value="/home"/>
			<env key="USER" value="icke"/>
			<env key="LC_CTYPE" value="en_US.UTF-8"/>
			<vfs>
				<dir name="dev">
					<dir name="pipe"> <pipe/> </dir>
					<log/> <rtc/> <terminal/>
					<oss name="dsp"/>
				</dir>
<!--
				<dir name="socket">
					<lwip dhcp="yes"/>
				</dir>
-->
				<dir name="media">
					<rom name="foo.mp3"/>
				</dir>
				<dir name="home"> <ram/> </dir>
				<dir name="lib">
					<dir name="cmus">
						<dir name="ip">
							<rom name="cmus_ip_flac.lib.so"/>
							<rom name="cmus_ip_opus.lib.so"/>
							<rom name="cmus_ip_mad.lib.so"/>
							<rom name="cmus_ip_vorbis.lib.so"/>
						</dir>
						<dir name="op">
							<!--<rom name="cmus_op_oss.lib.so"/>-->
							<rom name="cmus_op_sndio.lib.so"/>
						</dir>
					</dir>
				</dir>
				<dir name="share">
					<dir name="cmus">
						<rom name="rc"/>
					</dir>
				</dir>
			</vfs>
			<libc stdin="/dev/terminal" stdout="/dev/terminal" stderr="/dev/log" rtc="/dev/rtc" pipe="/dev/pipe"/>
		</config>
		<route>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

}

append_platform_drv_config

append config {
</config>}

install_config $config

#
# Generate a new host key
#
if {![file exists bin/ed25519_key]} {
	exec ssh-keygen -t ed25519 -f bin/ed25519_key -q -N ""
}

#
# Boot modules
#

# generic modules
append boot_modules {
	core ld.lib.so init timer } [audio_drv_binary] {

	ipxe_nic_drv rtc_drv report_rom nic_router

	libc.lib.so libm.lib.so vfs.lib.so
	vfs_lwip.lib.so vfs_pipe.lib.so
	posix.lib.so libcrypto.lib.so libssh.lib.so zlib.lib.so ncurses.lib.so
	vfs_jitterentropy.lib.so ssh_terminal

	ed25519_key cmus libiconv.lib.so

	cmus_op_oss.lib.so
	cmus_op_sndio.lib.so libsndio.lib.so
	cmus_ip_vorbis.lib.so libogg.lib.so libvorbis.lib.so
	cmus_ip_opus.lib.so opus.lib.so
	cmus_ip_flac.lib.so libFLAC.lib.so
	cmus_ip_mad.lib.so libmad.lib.so

	rc

	vfs_oss.lib.so foo.mp3
}

# platform-specific modules
append_platform_drv_boot_modules

build_boot_image $boot_modules

#
# Execute test
#

append qemu_args " -nographic -soundhw es1370 "

append_if [have_spec x86] qemu_args " -net nic,model=e1000 "

append qemu_args " -net user -redir tcp:5555::22 "


run_genode_until forever

# vi: set ft=tcl :
